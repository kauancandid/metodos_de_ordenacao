#include <stdio.h>
//#include <stdlib.h>

//Ordenação por comparação
//InsertionSort
void insertionSortCrescente(int *arr, int n){
    int i, key, j;
    for (i = 1; i < n; i++){    
      key = arr[i];
      j = i - 1;
      while (j >= 0 && arr[j] > key){
        arr[j + 1] = arr[j];
        j = j - 1;
        //arr[j + 1] = key;
      }
      arr[j + 1] = key;
    }
}

void insertionSortDecrescente(int *arr, int n){
    int i, j, key;
    int cont = 0;
    for (i = 1; i < n; i++){
      j = i;
      while (j > 0 && arr[j - 1] < arr[j]){
        cont++;
        key = arr[j];
        arr[j] = arr[j - 1];
        arr[j - 1] = key;
        j--;
      }
    }
    printf("linha 6: %d\n ", cont);
}

//SelectionSort
void selectionSort(int *v, int n){
  int i, j, min, aux;
  for(i = 0; i < n-1; i++){
    min = i;
    for(j = (i+1); j < n; j++){
      if(v[j]<v[min]){
        min = j;
      }
    }
    if(v[i] != v[min]){
      aux = v[i];
      v[i] = v[min];
      v[min] = aux;
    }
  }
}

//MergeSort
void merge(int *vetor, int inicio, int meio, int fim){
  int com1 = inicio;
  int com2 = meio+1;
  int comAux = 0;
  int vetAux[fim-inicio+1];

  while(com1<=meio && com2<=fim){
    if(vetor[com1] <= vetor[com2]){
      vetAux[comAux] = vetor[com1];
      com1++;
    }else{
      vetAux[comAux] = vetor[com2];
      com2++;
    }
    comAux++;
  }
  //Caso ainda haja elementos na primeira metade
  while(com1<=meio){
     vetAux[comAux] = vetor[com1];
     comAux++;com1++;
  }
  //Caso ainda haja elementos na segunda metade
  while(com2<=fim){
    vetAux[comAux] = vetor[com2];
    comAux++;com2++;
  }
  //Move os elementos de volta para o vetor original
  for(comAux=inicio;comAux<=fim;comAux++){
    vetor[comAux] = vetAux[comAux-inicio];
  }
}
void mergeSort(int *vetor, int inicio, int fim){
  if(inicio < fim){
    int meio = (inicio+fim)/2;
    mergeSort(vetor, inicio, meio);
    mergeSort(vetor, meio+1, fim);
    merge(vetor, inicio, meio, fim);
  }
}

//QuickSort
int particionar(int *a, int inicio, int final) {
    int esq, dir, pivo, aux;
    esq = inicio;
    dir = final;
    pivo = a[inicio];
    while(esq < dir) {
        while(a[esq] <= pivo) {
            esq++;
        }
        while(a[dir] > pivo) {
            dir--;
        }
        if(esq <= dir) {
            aux = a[esq];
            a[esq] = a[dir];
            a[dir] = aux;
        }
    }
    a[inicio] = a[dir];
    a[dir] = pivo;
    return dir;
}

void quickSort(int *a, int inicio, int fim){
  int pivo;
  if(fim > inicio){
    pivo = particiona(a, inicio, fim);
    quickSort(a, inicio, pivo -1);
    quickSort(a, pivo+1, fim);
  }
}

//Ordenação pseu-linear
//CountSort
void coutingSort(int *v, int n){
	int i, j, k;
  int max = 100;
  int b[max];
	//Passo 1
	for(i = 0; i < max; i++){
    b[i] = 0;
  }

	//Passo 2
	for(i = 0; i < n; i++){
    b[v[i]]++;
  }

	//Passo 3
	for(i = 0, j = 0; j < max; j++) {
    for(k = b[j]; k > 0; k--)
    v[i++] = j;
	}
}

//RadixSort
void radix(int *v, int n, int base, int num_digitos) { 
  int i, j, w, count[base+1], d, posicao; 
  int *aux = (int *) malloc(n * sizeof(int)); 
 
   for(w = 0; w < num_digitos; w++) {

     for(j = 0; j < base; j++) 
      count[j] = 0;        
      for(i = 1; i <= n; i++) {
        d = digito(v[i], w, base);          
        count[d+1]++;  
      } 
      for(j = 1; j < base; j++) 
        count[j] += count[j-1];
        for(i = 0; i < n; i++) {
          d = digito(v[i], w, base);
          posicao = count[d];
          count[d] += 1;
          aux[posicao] = v[i]; 
          }       
          for(i = 0; i < n; i++) v[i] = aux[i];    
  } 
}
  
//Bonus
//HeapSort
void criaHeap(int *vet, int i, int f){
  int aux = vet[i];
  int j = i * 2 + 1;
  while(j <= f){
    if(j < f){
      if(vet[j] < vet[j + 1]){
        j = j + 1;
      }
    }
    if(aux < vet[j]){
      vet[i] = vet[j];
      i = j;
      j = 2 * i + 1;
    }else{
      j = f + 1;
    }
  }
  vet[i] = aux;
}

void heapSort(int *v, int N){
  int i, aux;
  for(i = (N - 1)/2; i >= 0; i--){
    criaHeap(v, i, N-1);
  }
  for(i = N-1; i>= 1; i--){
    aux = v[0];
    v[0] = v[i];
    v[i] = aux;
    criaHeap(v, 0, i - 1);
  }
}

//BucketSort
//definir tam 5
struct balde{
  int qtd;
  int valores[5];
};
void bucketSort(int *v, int N){
  int i, j, maior, menor, nroBaldes, pos;
  struct balde *bd;
  //Acha maior e menor valor
  maior = menor = v[0];
  for(i = 1; i < N; i++){
    if(v[i] > maior) maior = v[i];
    if(v[i] < menor) menor = v[i];
  }
  //Inicializa baldes
  nroBaldes = (maior - menor)/ 5 + 1; //-> 5 é o tamanho
  bd =(struct balde *) malloc(nroBaldes * sizeof(struct balde));
  for (i = 0; i < nroBaldes; i++){
    bd[i].qtd = 0;
  }
  for(i = 0; i < N; i++){
    pos = (v[i] - menor)/5;
    bd[pos].valores[bd[pos].qtd] = v[i];
    bd[pos].qtd++;
  }
  //Ordena baldes e coloca no array
  pos = 0;
  for(i = 0; i< nroBaldes; i++){
    insertionSortCrescente(bd[i].valores, bd[i].qtd);
    for(j = 0; j < bd[i].qtd; j++){
      v[pos] = bd[i].valores[j];
      pos++;
    }
  }
  free(bd);
}

int main(void) {
  int a[] = {5, 7, 1, 8, 10};
  int tam = sizeof(a)/sizeof(int);

  insertionSortCrescente(a, tam);
  for(int i = 0; i < 5; i++){
    printf("%d ", a[i]);
  }

  printf("\n");

  insertionSortDecrescente(a, tam);
  for(int i = 0; i < 5; i++){
    printf("%d ", a[i]);
  }
}